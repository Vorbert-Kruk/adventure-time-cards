@import './variables.scss';

@mixin flex(
  $direction: column,
  $justifyContent: flex-start,
  $alignItems: stretch
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justifyContent;
  align-items: $alignItems;
}

@mixin centerAbsolutely($centerDirection: center) {
  position: absolute;

  @if $centerDirection == vertical {
    top: 50%;
    transform: translateY(-50%);
  } @else if $centerDirection == horizontal {
    left: 50%;
    transform: translateX(-50%);
  } @else {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin statisticColors() {
  $color-key-name: 'color';
  $opaque-color-key-name: 'opaque-color';
  $colors: (
    'orange': (
      $color-key-name: $orange-color,
      $opaque-color-key-name: $orange-opaque-color,
    ),
    'green': (
      $color-key-name: $green-color,
      $opaque-color-key-name: $green-opaque-color,
    ),
    'red': (
      $color-key-name: $red-color,
      $opaque-color-key-name: $red-opaque-color,
    ),
  );

  @each $colorName, $colorValues in $colors {
    &_#{$colorName} {
      --#{$color-key-name}: #{map-get($colorValues, $color-key-name)};
      --#{$opaque-color-key-name}: #{map-get(
          $colorValues,
          $opaque-color-key-name
        )};
    }
  }
}

@mixin cardColors() {
  $color-key-name: 'card-color';
  $opaque-color-key-name: 'card-color-opaque';
  $background-color-key-name: 'background-color';
  $colors: (
    'blue': (
      $color-key-name: $blue-color,
      $opaque-color-key-name: $blue-opaque-color,
      $background-color-key-name: $blue-background-color,
    ),
    'yellow': (
      $color-key-name: $yellow-color,
      $opaque-color-key-name: $yellow-opaque-color,
      $background-color-key-name: $yellow-background-color,
    ),
    'purple': (
      $color-key-name: $purple-color,
      $opaque-color-key-name: $purple-opaque-color,
      $background-color-key-name: $purple-background-color,
    ),
    'dark': (
      $color-key-name: $dark-color,
      $opaque-color-key-name: $dark-opaque-color,
      $background-color-key-name: $dark-background-color,
    ),
  );

  @each $colorName, $colorValues in $colors {
    &_#{$colorName} {
      --#{$color-key-name}: #{map-get($colorValues, $color-key-name)};
      --#{$opaque-color-key-name}: #{map-get(
          $colorValues,
          $opaque-color-key-name
        )};
      --#{$background-color-key-name}: #{map-get(
          $colorValues,
          $background-color-key-name
        )};
    }
  }
}
